import java.awt.EventQueue;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Random;
import java.util.Set;

import javax.swing.JFrame;


public class DoPuzzle {
//	static int[] targetState = {1,2,3,4,5,6,7,8,0};
//	static int[] startState = {0,1,2,3,4,5,6,7,8};


	
	static ArrayList<Puzzle> open = new ArrayList<Puzzle>();
	static ArrayList<Puzzle> close = new ArrayList<Puzzle>();
	
//	static int[][] result = new int[400000][9];
//	static StringBuffer bestPath = new StringBuffer();
	
	
	static void changeTo(int[] state) {
		int count=1;
		int a = -1, b = -1;
		for(int i=0; i<9; i++) {
			if(state[i] != 0) {
				if(count == 2) {
					b = i;
					break;
				}
				a = i;
				count++;
			}
		}
		int temp = state[a];
		state[a] = state[b];
		state[b] = temp;
	}
		
	static void printPuzzleRoute(int[][] result, int last) {

		for(int i=last; i>=0; i--) {
			for(int j=0; j<9; j++) {

				if(j%3 == 2)
	    			System.out.println(result[i][j]);
	    		else
	    			System.out.print(result[i][j] + " ");
			}
			System.out.println("------------" + (last-i) +"-------------");
		}
		
	}

	static int getZeroPosition(int[] resultNum, int last) {
		int position = -1;
			for(int j=0; j<9; j++) {
				if(resultNum[j] == 0) {
					position = j;
					break;
				}
			}
		return position;
	}
	
	static Puzzle doRestore(Puzzle start, Puzzle target) {
		long startTime = System.currentTimeMillis();
		
		//设置权重
		start.weight(target);
		open.add(start);

		Puzzle retBest = new Puzzle();
		while(open.isEmpty() == false) {

			Collections.sort(open);
			
			Puzzle best = open.get(0);
			retBest = best;
			open.remove(0);
			close.add(best);
			
			if(best.isTarget(target)) {
				long end=System.currentTimeMillis(); 
                System.out.println("程序运行时间： "+(end-startTime)/1000+"s");
//                System.exit(0);
        		break;
			}

			int moveDir;
			if(best.canUp()) {

				moveDir = 0;
				Puzzle up = best.doMove(moveDir);
				up.bfs(open, close, best, target);
			}
			
			if(best.canDown()) {

				moveDir = 1;
				Puzzle down = best.doMove(moveDir);
				down.bfs(open, close, best, target);
			}
			
			if(best.canLeft()) {

				moveDir = 2;
				Puzzle left = best.doMove(moveDir);
				left.bfs(open, close, best, target);
			}
			
			if(best.canRight()) {

				moveDir = 3;
				Puzzle right = best.doMove(moveDir);
				right.bfs(open, close, best, target);
			}

		}
		return retBest;
	}


	
	
	public static void main(String[] args) {
			
//		Puzzle target = new Puzzle();
//		Puzzle start = new Puzzle();
//		
////		int[] startState = new int[9];
//		
//		target.setNum(targetState);
//
//		
//		
//		System.out.println("----------生成随机状态----------");
////		startState = Model.creatRandomState();
//		
////		for(int i=0; i<9; i++) {
////    		if(i%3 == 2)
////    			System.out.println(startState[i]);
////    		else
////    			System.out.print(startState[i] + " ");
////    	}
////		
//		
//		start.setNum(startState);
//		Puzzle best = new Puzzle();
//		if(start.isSolvable(target)) {
//			System.out.println("----------开始复原----------");
//			best = doRestore(start, target);
//			
//		}else {
//			System.out.println("----------此状态无解----------");
////			changeTo(startState);
//			int a =0, b = 1;
//			int temp = startState[a];
//			startState[a] = startState[b];
//			startState[b] = temp;
//			System.out.println("----------正在转换----------");
//			
//			//MARK 待解耦
//			for(int i=0; i<9; i++) {
//	    		if(i%3 == 2)
//	    			System.out.println(startState[i]);
//	    		else
//	    			System.out.print(startState[i] + " ");
//	    	}
//			System.out.println("----------已生成有解状态----------");
//			System.out.println("----------开始复原----------");
//			best.setNum(startState);
//			best = doRestore(start,target);
//		}
//
//		//存储最优路径
//		int last=-1;
//		while(best != null) {
//			result[++last] = best.getNum();
//			best = best.getParent();
//		}
//		System.out.println(last);
//		printPuzzleRoute(result, last);
//		
//
//		for(int i=last-1; i>=0; i--) {
//			int j = i+1;
//			int beforePos = getZeroPosition(result[j], last);
//			int afterPos = getZeroPosition(result[i], last);
//			switch((afterPos - beforePos)) {
//			case 1:
//				bestPath.append("R");
//				break;
//			case -1:
//				bestPath.append("L");
//				break;
//			case 3:
//				bestPath.append("D");
//				break;
//			case -3:
//				bestPath.append("U");
//				break;
//			}
//		}
//		
//		new SimpleFrame(3, 3);
//		System.out.println(bestPath);		
//		System.out.println("结束");
	}
    
}
