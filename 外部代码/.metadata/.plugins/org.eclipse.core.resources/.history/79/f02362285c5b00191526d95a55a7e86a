import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Menu;
import java.awt.MenuBar;
import java.awt.MenuItem;
import java.awt.Panel;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;





public class SimpleFrame extends JFrame implements ActionListener,KeyListener{

//	private static final int DEFAULT_WIDTH = 800;
//	private static final int DEFAULT_HEIGHT = 800;

	MenuBar menubar=new MenuBar();
	Menu menu_file = new Menu("帮助");
	MenuItem restart = new MenuItem("重新开始");
	MenuItem nextPath = new MenuItem("提示");
	MenuItem printPath = new MenuItem("还原");
	MenuItem exit = new MenuItem("退出");
	
	Button[] button;
	Panel panel;
	int row,col;
	private static int position,cellNum;
	
	final int dr[] = { 0,-1, 0, 1};
	final int dc[] = {-1, 0, 1, 0};
	
	public SimpleFrame(int row,int col) {
		super.setMenuBar(menubar);
		//Windows风格 
		try {
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
		} catch (Exception e) {
			e.printStackTrace();
		}
		this.row = row;
		this.col = col;
		cellNum = row*col;
		
		restart.addActionListener(this);
		exit.addActionListener(this);
		nextPath.addActionListener(this);
		printPath.addActionListener(this);
		menu_file.add(restart);
		menu_file.add(nextPath);
		menu_file.add(printPath);
		menu_file.add(exit);
		menubar.add(menu_file);
		
		panel = new Panel(new GridLayout(row,col)) ;
		
		button = new Button[cellNum];
		for(int i = 0; i < cellNum; i++) {
			if(i == cellNum - 1) {
				button[i] = new Button(" ");
			}else {
				button[i] = new Button(String.valueOf(i + 1));
			}
			button[i].setFont(new Font("Courier", 1, 20));
			button[i].addActionListener(this);
			button[i].addKeyListener(this);
			panel.add(button[i]);
		}
		
		this.add(BorderLayout.CENTER,panel);
		this.setTitle("八数码");
		this.setVisible(true);
		this.setSize(400,400);
		
		Toolkit kit = Toolkit.getDefaultToolkit();
		Dimension screenSize = kit.getScreenSize();
		int screenWidth = screenSize.width/2;
		int screenHeight = screenSize.height/2;
		int height = this.getHeight();
		int width = this.getWidth();
		this.setLocation(screenWidth-width/2, screenHeight-height/2);
		this.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});

	}
	
	void start() {
		int a[] = new int[9];
		a = DoPuzzle.startState;
		for(int i = 0; i < 9; i++) {
			button[i].setLabel(String.valueOf(a[i]));
			if(a[i] == 0) {
				position = i;
				button[i].setLabel(" ");
			}
				

		}
			

		
	}
	
	boolean win() {
		for(int i = 0; i < cellNum - 1; i++) {
			if(button[i].getLabel().equals(" ")) {
				return false;
			}else if(Integer.valueOf(button[i].getLabel()) != i+1) {
				return false;
			}
		}
		return true;
	}

	private boolean judge(Button a, Button b) {
		for(int i = 0; i < 4; i++) {
			if( (a.getX() == b.getX() + dr[i]*a.getWidth()) 
					&& (a.getY() == b.getY() + dc[i]*a.getHeight())) {
				return true;
			}
		}
		return false;
	}
	
	
	public void actionPerformed(ActionEvent e) {
		Puzzle best = new Puzzle();
		int[] stateNum = new int[9];
		if(e.getSource() == restart) {
			start();
			return;
		}else if(e.getSource() == exit) {
			System.exit(0);
			return;
		}else if(e.getSource() == nextPath) {
			
			
			for(int i = 0; i < cellNum; i++) {
				if(button[i].getLabel().equals(" ")) {
					stateNum[i] = 0;
				}else {
					stateNum[i] = Integer.parseInt(button[i].getLabel());
				}
			}
			best.setNum(stateNum);
			best = doRestore(DoPuzzle.start);
			
			int last=-1;
			while(best != null) {
				result[++last] = best.getNum();
				best = best.getParent();
			}
			System.out.println(last);
			printPuzzleRoute(result, last);
			

			for(int i=last-1; i>=0; i--) {
				int j = i+1;
				int beforePos = getZeroPosition(result[j], last);
				int afterPos = getZeroPosition(result[i], last);
				switch((afterPos - beforePos)) {
				case 1:
					bestPath.append("R");
					break;
				case -1:
					bestPath.append("L");
					break;
				case 3:
					bestPath.append("D");
					break;
				case -3:
					bestPath.append("U");
					break;
				}
			}
			
			
			JOptionPane.showMessageDialog(this,"建议走："+bestPath);
			System.out.println(bestPath);
			return;
		}else if(e.getSource() == printPath) {
			StringBuffer path = DoPuzzle.bestPath;
			for(int i = 0; i < path.length(); i++) {
				switch(path.charAt(i)) {
				case 'U':
					go(KeyEvent.VK_UP);
					break;
				case 'D':
					go(KeyEvent.VK_DOWN);
					break;
				case 'L':
					go(KeyEvent.VK_LEFT);
					break;
				case 'R':
					go(KeyEvent.VK_RIGHT);
					break;
				}
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		}
		
		for(int i = 0; i < cellNum; i++) {
			if(e.getSource() == button[i]) {
				if(!button[i].getLabel().equals(" ") && judge(button[i],button[position])) {
					button[position].setLabel(button[i].getLabel());
					button[i].setLabel(" ");
					position = i;
				}
			}
		}
		
		if(win()) {
			JOptionPane.showMessageDialog(this,"Congratulations");
		}
	}
	
	void go(int dir) {
		int x = position / col;
		int y = position % col;
		switch(dir) {
		case KeyEvent.VK_UP:
			if(x != 0) {
				button[position].setLabel(button[position-col].getLabel());
				button[position-col].setLabel(" ");
				position -= col;
			}
			break;
		case KeyEvent.VK_DOWN:
			if(x != row-1) {
				button[position].setLabel(button[position+col].getLabel());
				button[position+col].setLabel(" ");
				position += col;
			}
			break;
		case KeyEvent.VK_LEFT:
			if(y != 0) {
				button[position].setLabel(button[position-1].getLabel());
				button[position-1].setLabel(" ");
				position -= 1;
			}
			break;
		case KeyEvent.VK_RIGHT:
			if(y != col-1) {
				button[position].setLabel(button[position+1].getLabel());
				button[position+1].setLabel(" ");
				position += 1;
			}
			break;
		}
	}

	
	@Override
	public void keyPressed(KeyEvent e) {
		go(e.getKeyCode());
		if(win()) {
			JOptionPane.showMessageDialog(this,"Congratulations");
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {}

	@Override
	public void keyTyped(KeyEvent e) {}


	
}
